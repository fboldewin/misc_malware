# Decrypts Ransom Notes stored inside resource section of cl0p ransomware samples
#
# Requires Python 3 and Malduck
#
# Tested against the following samples:
#
# 013c26c6d68bc2f75f88f6b8ed1961af74a9bfae46e3c2a8dfd46c6bd89674e2
# 15f9ed36d9efc6e570b4f506791ce2c6a849853e2f6d587f30fb12d39dba2649
# 18a561d66acb04ab5a53629fcee29046c23ce9f2e8cda093c8b6d2670d2e57c5
# 18f402a0711fc359bca08084e89b6154608a69f5b42a34f53004430a27f496ac
# 276f5e83e820afec76398147b9249786de2b2bac77d7944eae98add5f386b434
# 6a98a7cce6d50b9f5590977689dc18e1f8ea27c18b8c7026b3e8ea0fe1220861
# 7b42666d3ebe4c9817c0a3dc057732ca30173c7076ffea0455f22dd4387bef59
#
# For testing => cl0p_ransomnote_decrypter.py <path_to_cl0p_samples>
#
# Proof of concept code by Frank Boldewin (@r3c0nst)

import malduck
import sys
import os

keydb = [b'Lfgjdskflewhru32qruhfsnbkghejBHFSDNFGKLGjhrwjkgnwjkht24u3uifsrgnmwrlknmNJKGHSFDJNNGJKLSDlljkKjw', b'JKHfg34789t6y8f9JLKHFUEWir3289457yfnKLSFEj2jk34y57823fjvsdiogh23funrjtubh287yutihfgvdfkjrgb34hj']
resdb = ['ID_HTML','RC_DDDFFF']

def decrypt_ransom_note(file):
	with open(file, 'rb') as f:
		try:
			pe = malduck.pe(f.read())
		except:
			print ("\t==> Error reading PE file!\n")
			return

	for res in resdb:
		crypted_buffer = pe.resource(res)
		if crypted_buffer != None:
			break

	if crypted_buffer != None:
		for key in keydb:
			decrypted_buffer = b''
			for current_byte in range(0, len(crypted_buffer)):
				decrypted_buffer += bytes([crypted_buffer[current_byte] ^ key[current_byte % 0x21]])
			if b'DEAR' in decrypted_buffer:
				print(decrypted_buffer)
				break
	else:
		print("\t==> Expected resources not found!")
		return

if __name__ == "__main__":
	i = 1
	for r, d, f in os.walk(sys.argv[1]):
		for file in f:
			print ("\n\n[File %i ==> %s] \n\n" % (i, file))
			i += 1
			decrypt_ransom_note(os.path.join(r, file))
