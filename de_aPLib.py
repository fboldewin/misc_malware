# Scans for an aPLib compressed PE binary inside a given file and writes the decompressed buffer to disk.
# aPLib decompression is done using the Malduck
# This code was tested on 32+64 bit shellcodes found in obfuscated FIN8 Badhatch Powershell script
# Hash: 981ecfc67d7192f0e82f3f8042d7c26c78396a3a62e5e34c717db31aee566eca
# Proof of Concept code by Frank Boldewin (@r3c0nst)

import malduck
import re
import sys

aPLib_compressed_PE_Sig = b'\x4D\x38\x5A'

def main(argv):
	if len(argv) < 2:
		print('\nUsage: de_aPLib.py <file_containing_aPLib compressed code>')
		return

	with open(argv[1], 'rb') as f:
		data = f.read()
		offset = re.search(aPLib_compressed_PE_Sig, data)
		result = malduck.aplib(data[offset.start():])
		if result:
			with open(argv[1] + '.decompressed', 'wb') as o:
				o.write(result)
				print(f'\nDecompressed file => %s.decompressed' % argv[1])
		else:
			print(f'\nCannot decompress aPLib buffer.')

if __name__ == "__main__":
	main(sys.argv)
